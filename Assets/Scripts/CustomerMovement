using UnityEngine;
using System;

public class CustomerMovement : MonoBehaviour
{
    [Header("Movement Settings")]
    public float walkSpeed = 2f;               // How fast customer walks
    public float rotationSpeed = 5f;           // How fast customer turns
    public float arrivalDistance = 0.5f;       // How close to count as "arrived"
    
    [Header("Animation")]
    public Animator animator;                  // Reference to animator (optional)
    public string walkAnimationName = "Walk";
    public string idleAnimationName = "Idle";
    
    [Header("Audio")]
    public AudioSource audioSource;
    public AudioClip doorBellSound;            // Bell when entering
    public AudioClip footstepSound;            // Walking sound
    
    // Current state
    private enum CustomerState
    {
        WalkingToCounter,
        WaitingAtCounter,
        Leaving
    }
    
    private CustomerState currentState = CustomerState.WalkingToCounter;
    private Vector3 targetPosition;
    private Vector3 exitPosition;              // Where customer spawned (door)
    private bool hasReachedCounter = false;
    private bool hasReceivedOrder = false;
    
    // Events for communication with other systems
    public Action<GameObject> onReachedCounter;
    public Action<GameObject> onCustomerLeft;
    
    void Start()
    {
        // Store exit position (spawn point)
        exitPosition = transform.position;
        
        // Play door bell sound
        if (audioSource != null && doorBellSound != null)
        {
            audioSource.PlayOneShot(doorBellSound);
        }
        
        // Start walking animation
        PlayAnimation(walkAnimationName);
    }
    
    void Update()
    {
        switch (currentState)
        {
            case CustomerState.WalkingToCounter:
                MoveTowardsTarget(targetPosition);
                break;
                
            case CustomerState.WaitingAtCounter:
                // Customer is idle, waiting for order
                // Could add idle animations here (looking around, checking phone)
                break;
                
            case CustomerState.Leaving:
                MoveTowardsTarget(exitPosition);
                break;
        }
    }
    
    // Set where customer should walk to
    public void SetDestination(Vector3 destination)
    {
        targetPosition = destination;
        currentState = CustomerState.WalkingToCounter;
    }
    
    // Move customer towards target position
    void MoveTowardsTarget(Vector3 target)
    {
        // Calculate direction
        Vector3 direction = (target - transform.position).normalized;
        direction.y = 0; // Keep on ground level
        
        // Check if arrived
        float distance = Vector3.Distance(transform.position, target);
        if (distance <= arrivalDistance)
        {
            OnArrived();
            return;
        }
        
        // Move forward
        transform.position += direction * walkSpeed * Time.deltaTime;
        
        // Rotate to face direction
        if (direction != Vector3.zero)
        {
            Quaternion targetRotation = Quaternion.LookRotation(direction);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
        
        // Play footstep sounds periodically (optional)
        if (footstepSound != null && audioSource != null && !audioSource.isPlaying)
        {
            audioSource.PlayOneShot(footstepSound, 0.3f);
        }
    }
    
    // Called when customer reaches their destination
    void OnArrived()
    {
        if (currentState == CustomerState.WalkingToCounter && !hasReachedCounter)
        {
            // Reached the counter
            hasReachedCounter = true;
            currentState = CustomerState.WaitingAtCounter;
            
            PlayAnimation(idleAnimationName);
            
            // Notify other systems
            onReachedCounter?.Invoke(gameObject);
            
            Debug.Log("Customer arrived at counter");
        }
        else if (currentState == CustomerState.Leaving)
        {
            // Reached the exit
            PlayAnimation(idleAnimationName);
            
            // Notify spawner to remove this customer
            onCustomerLeft?.Invoke(gameObject);
            
            Debug.Log("Customer left restaurant");
        }
    }
    
    // Called when customer receives their order
    public void ReceiveOrder(bool wasAccurate)
    {
        if (!hasReceivedOrder)
        {
            hasReceivedOrder = true;
            
            // Show customer emotion based on accuracy
            if (wasAccurate)
            {
                Debug.Log("Customer is happy! ðŸ˜Š");
                // Play happy animation/sound
            }
            else
            {
                Debug.Log("Customer is disappointed ðŸ˜ž");
                // Play disappointed animation/sound
            }
            
            // Leave after receiving order (with small delay)
            Invoke("LeaveRestaurant", 1.5f);
        }
    }
    
    // Make customer leave the restaurant
    public void LeaveRestaurant()
    {
        currentState = CustomerState.Leaving;
        PlayAnimation(walkAnimationName);
        
        Debug.Log("Customer is leaving...");
    }
    
    // Play animation (if animator exists)
    void PlayAnimation(string animationName)
    {
        if (animator != null && !string.IsNullOrEmpty(animationName))
        {
            animator.Play(animationName);
        }
    }
    
    // Force immediate removal (for timeout/failed orders)
    public void RemoveImmediately()
    {
        onCustomerLeft?.Invoke(gameObject);
    }
    
    // Get current waiting time (for impatience system)
    public float GetWaitTime()
    {
        if (currentState == CustomerState.WaitingAtCounter)
        {
            return Time.time; // Can track actual wait time if needed
        }
        return 0f;
    }
    
    // Check if customer is waiting
    public bool IsWaiting()
    {
        return currentState == CustomerState.WaitingAtCounter;
    }
}
